{
  "name": "Oxymoron",
  "tagline": "The newest Rails + AngularJS way",
  "body": "# Oxymoron\r\n\r\n[Example application](https://github.com/storuky/oxymoron_app)\r\n\r\n[Basic forum based on Oxymoron](https://github.com/storuky/forum)\r\n##Setup\r\n\r\nAdd it to your Gemfile:\r\n\r\n```\r\ngem 'oxymoron'\r\n```\r\n\r\n## Basic settings (Asset Pipeline)\r\n\r\nAdd dependencies to your application.js and application.css\r\n\r\n**application.js**\r\n```\r\n/*\r\n= require oxymoron/angular\r\n= require oxymoron/angular-resource\r\n= require oxymoron/angular-cookies\r\n= require oxymoron/angular-ui-router\r\n= require oxymoron/ng-notify\r\n= require oxymoron\r\n*/\r\n```\r\n\r\n**application.css**\r\n```\r\n/*\r\n *= require oxymoron/ng-notify\r\n */\r\n```\r\n\r\n## Advanced settings\r\n\r\n\r\n**config/initializers/oxymoron.rb**\r\n```\r\nOxymoron::Config.setup do |c|\r\n  # change path for generated oxymoron.js\r\n  c.oxymoron_js_path = Rails.root.join('app', 'assets', 'javascripts', 'public') \r\n  \r\n  # Change form builder. By default used OxymoronFormBuilder\r\n  c.form_builder = MyFormBuilder \r\n  \r\n  # Disabled rewrite form_for method in ActionView::FormHelper. In this case use helpers oxymoron_form_for and oxymoron_field_for\r\n  c.rewrite_form_for = false \r\nend\r\n```\r\n\r\n##Usage\r\n\r\nNext, you need to inject required modules 'oxymoron' and 'ui.router'\r\n\r\n**application.js**\r\n```\r\nangular.module('app', ['ui.router', 'oxymoron'])\r\n```\r\n\r\nCreate file routes.js, which will contain the application SPA-routings. Method $stateProvider.rails() transform routes.rb to Angular UI Router states.\r\n\r\n**routes.js**\r\n```\r\nangular.module('app')\r\n  .config(['$stateProvider', function ($stateProvider) {\r\n    $stateProvider.rails()\r\n  }])\r\n```\r\n\r\nDisable layouts for all ajax query:\r\n\r\n**app/controllers/application_controller.rb**\r\n```\r\nclass ApplicationController < ActionController::Base\r\n  layout proc {\r\n    if request.xhr?\r\n      false\r\n    else\r\n      index\r\n      'application' # or other layout\r\n    end\r\n  }\r\n  \r\n  private\r\n  def index\r\n    # In the production mode write this string into initializers/oxymoron.rb\r\n    ActionView::Base.default_form_builder = OxymoronBuilder\r\n  end\r\nend\r\n```\r\n\r\nEdit your layout with ui-view notation:\r\n\r\n**app/views/layouts/application**\r\n```\r\n= yield\r\n```\r\nto\r\n```\r\nui-view\r\n```\r\nor for SEO-friendly\r\n```\r\nui-view\r\n  div[ng-non-bindable]\r\n    = yield\r\n```\r\n\r\n\r\nAll controllers methods must be wrapped with respond_to\r\n\r\n**Example:**\r\n```\r\nclass PostsController < ActiveRecord::Base\r\n  before_action :set_post, only: [:show, :update, :destroy]\r\n\r\n  def index\r\n    respond_to do |format|\r\n      format.html\r\n      format.json {\r\n        @posts = Post.all\r\n        render json: @posts\r\n      }\r\n    end\r\n  end\r\n  \r\n  def show\r\n    respond_to do |format|\r\n      format.html\r\n      format.json {\r\n        render json: @post\r\n      }\r\n    end\r\n  end\r\n  \r\n  def new\r\n  end\r\n  \r\n  def edit\r\n  end\r\n  \r\n  def create\r\n    respond_to do |format|\r\n      format.json {\r\n        @post = Post.new post_params\r\n        if @post.save\r\n          render json: {post: @post, msg: \"Post successfully created\", redirect_to: \"posts_path\"}\r\n        else\r\n          render json: {errors: @post.errors, msg: @post.errors.full_messages.join(', ')}, status: 422\r\n        end\r\n      }\r\n    end\r\n  end\r\n\r\n  def update\r\n    respond_to do |format|\r\n      format.json {\r\n        if @post.update(post_params)\r\n          render json: {post: @post, msg: \"Post successfully updated\", redirect_to: \"posts_path\"}\r\n        else\r\n          render json: {errors: @post.errors, msg: @post.errors.full_messages.join(', ')}, status: 422\r\n        end\r\n      }\r\n    end\r\n  end\r\n\r\n  def destroy\r\n    respond_to do |format|\r\n      format.json {\r\n        @post.destroy\r\n        render json: {msg: \"Post successfully deleted\"}\r\n      }\r\n    end\r\n  end\r\n  \r\n  private\r\n    def set_post\r\n      @post = Post.find(params[:id])\r\n    end\r\n    \r\n    def post_params\r\n      params.require(:post).permit(:title, :description, :author)\r\n    end\r\nend\r\n```\r\n\r\nOxymoron add some functionality for your AngularJS application. You can use *factory* whose name matches the name of your resources routes.rb. Do not forget to inject it, when it's required.\r\nIn our case it is Post resource.\r\n\r\n```\r\nPost.query() // => GET /posts.json\r\nPost.get({id: id}) // => GET /posts/:id.json\r\nPost.new() // => GET /posts/new.json\r\nPost.edit({id: id}) // => GET /posts/:id/edit.json\r\nPost.create({post: post}) // => POST /posts.json\r\nPost.update({id: id, post: post}) // => PUT /posts/:id.json\r\nPost.destroy({id: id}) // => DELETE /posts/:id.json\r\n```\r\n\r\nAdd AngularJS-controller \"PostsCtrl\"\r\n\r\n**Example:**\r\n\r\n```\r\nangular.module('app')\r\n  .controller('PostsCtrl', ['Post', 'action', function (Post, action) {\r\n    var ctrl = this;\r\n    \r\n    // Called only on '/posts'\r\n    action('index', function(){\r\n      ctrl.posts = Post.query();\r\n    });\r\n    \r\n    // Called only for '/posts/:id'\r\n    action('show', function (params){\r\n      ctrl.post = Post.get({id: params.id});\r\n    });\r\n    \r\n    // Called only on '/posts/new'\r\n    action('new', function(){\r\n      ctrl.post = Post.new();\r\n      ctrl.save = Post.create;\r\n    });\r\n    \r\n    // Called only for '/posts/:id/edit'\r\n    action('edit', function (params){\r\n      ctrl.post = Post.edit({id: params.id});\r\n      ctrl.save = Post.update;\r\n    })\r\n    \r\n    // Called only for '/posts/:id/edit' or '/posts/new'\r\n    action(['edit', 'new'], function(){\r\n      //\r\n    })\r\n    \r\n    // Called only for your custom resource method. For example: '/posts/some_method'\r\n    action('some_method', function(){\r\n      //\r\n    })\r\n    \r\n    // etc\r\n  }])\r\n```\r\n\r\n##Example Views\r\n**posts/index.html.slim**\r\n\r\n```\r\nh1 Posts\r\n\r\ninput type=\"text\" ng-model=\"search\"\r\n\r\ntable\r\n  thead\r\n    tr\r\n      th Date\r\n      th Title\r\n      th Author\r\n  tbody\r\n    tr ng-repeat=\"post in ctrl.posts | filter:search\"\r\n      td\r\n        | {{post.created_at | date:\"dd.MM.yyyy\"}}\r\n      td\r\n        | {{post.title}}\r\n      td\r\n        | {{post.author}}\r\n```\r\n\r\n**posts/show.html.slim**\r\n```\r\ndl\r\n  dl Date\r\n  dd\r\n    | {{ctrl.post.created_at | date:\"dd.MM.yyyy\"}}\r\n  dl Title\r\n  dd\r\n    | {{ctrl.post.title}}\r\n  dl author\r\n  dd\r\n    | {{ctrl.post.author}}\r\n```\r\n\r\n**posts/new.html.slim**\r\n```\r\nh1 New post\r\n\r\n= render 'form'\r\n```\r\n\r\n**posts/edit.html.slim**\r\n```\r\nh1 Edit post\r\n\r\n= render 'form'\r\n```\r\n\r\n**posts/_form.html.slim**\r\n```\r\n= form_for Post.new do |f|\r\n  div\r\n    = f.label :title\r\n    = f.text_field :title\r\n  div\r\n    = f.label :description\r\n    = f.text_area :description\r\n  \r\n  = f.submit \"Save\"\r\n  \r\n```\r\n\r\nUse *ui-sref* insted of link_to helper\r\n```\r\na ui-sref=\"posts_path\" All posts\r\na ui-sref=\"new_post_path\" New post\r\na ui-sref=\"edit_post_path({id: id})\" Edit post\r\na ui-sref=\"post_path({id: id})\" Show\r\n```\r\n\r\n##Routes\r\nIn window you can find *Routes* variable, which contains all routes of your app (such as JsRoutes).\r\n\r\n**Example**\r\n```\r\nRoutes.posts_path() //=> '/posts'\r\nRoutes.post_path({id: 1}) //=> '/posts/1'\r\nRoutes.post_path({id: 1, format: \"json\"}) //=> '/posts/1.json'\r\nRoutes.posts_url() //=> 'http://localhost:3000/posts'\r\n```\r\nIf your expect that your controller method return an array, you must mark this routes with *is_array* property. If you do not, it throw an exception from angular.\r\n```\r\nresources :posts do\r\n  get 'my', is_array: true\r\nend\r\n```\r\n\r\nHappy coding :)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}